#!/usr/bin/env python3
"""
Script para criar PDB completo: Proteína + Fragmentos dos Hotspots
"""

import os

def read_protein_pdb():
    """Lê a proteína completa"""
    protein_file = "/home/murilo/girias/ftmapcaseiro/protein_raw.pdb"
    
    if not os.path.exists(protein_file):
        print(f"ERRO: {protein_file} não encontrado!")
        return []
    
    with open(protein_file, 'r') as f:
        lines = f.readlines()
    
    # Filtra apenas linhas ATOM da proteína
    protein_lines = []
    for line in lines:
        if line.startswith('ATOM'):
            protein_lines.append(line.strip())
    
    print(f"✅ Proteína carregada: {len(protein_lines)} átomos")
    return protein_lines

def parse_pdbqt_file(filepath):
    """Extrai poses de um arquivo PDBQT"""
    if not os.path.exists(filepath):
        return []
    
    poses = []
    current_pose = []
    current_energy = None
    
    with open(filepath, 'r') as f:
        for line in f:
            line = line.strip()
            
            if line.startswith('MODEL'):
                current_pose = []
                current_energy = None
            elif 'VINA RESULT:' in line:
                try:
                    current_energy = float(line.split()[2])
                except:
                    current_energy = 0.0
            elif line.startswith('ATOM') or line.startswith('HETATM'):
                current_pose.append(line)
            elif line.startswith('ENDMDL'):
                if current_pose and current_energy is not None:
                    poses.append({
                        'atoms': current_pose[:],
                        'energy': current_energy
                    })
    
    return poses

def get_best_poses():
    """Pega a melhor pose de cada fragmento"""
    results_dir = "/home/murilo/girias/ftmapcaseiro/results"
    
    # Fragmentos com arquivos improved
    fragments = [
        'Acetaldehyde', 'Acetone', 'Benzene', 
        'Ethanol', 'Isopropanol', 'Phenol'
    ]
    
    best_poses = []
    
    for fragment in fragments:
        pdbqt_file = f"{results_dir}/poses_probe_{fragment}_improved.pdbqt"
        
        if os.path.exists(pdbqt_file):
            poses = parse_pdbqt_file(pdbqt_file)
            
            if poses:
                # Pega a melhor pose (menor energia)
                best_pose = min(poses, key=lambda x: x['energy'])
                
                best_poses.append({
                    'name': fragment,
                    'atoms': best_pose['atoms'],
                    'energy': best_pose['energy']
                })
                
                print(f"✅ {fragment}: {best_pose['energy']:.2f} kcal/mol ({len(best_pose['atoms'])} átomos)")
            else:
                print(f"❌ {fragment}: Sem poses válidas")
        else:
            print(f"❌ {fragment}: Arquivo não encontrado")
    
    return best_poses

def create_complete_pdb():
    """Cria o PDB completo"""
    print("🚀 Criando PDB completo...")
    
    # 1. Carrega proteína
    protein_atoms = read_protein_pdb()
    if not protein_atoms:
        print("❌ ERRO: Não foi possível carregar a proteína!")
        return
    
    # 2. Pega melhores poses dos fragmentos
    fragment_poses = get_best_poses()
    if not fragment_poses:
        print("❌ ERRO: Nenhum fragmento encontrado!")
        return
    
    # 3. Cria arquivo PDB completo
    output_file = "/home/murilo/girias/ftmapcaseiro/results/ftmap_protein_plus_hotspots.pdb"
    
    with open(output_file, 'w') as f:
        # Header
        f.write("REMARK FTMap Complete System: Protein + Hotspot Fragments\n")
        f.write("REMARK Generated by FTMap Caseiro System\n")
        f.write(f"REMARK Protein atoms: {len(protein_atoms)}\n")
        f.write(f"REMARK Fragment poses: {len(fragment_poses)}\n")
        f.write("REMARK\n")
        
        # Escreve proteína completa
        f.write("REMARK ==================== PROTEIN ====================\n")
        for line in protein_atoms:
            f.write(line + "\n")
        
        f.write("TER\n")
        
        # Escreve fragmentos
        f.write("REMARK ==================== HOTSPOT FRAGMENTS ====================\n")
        
        atom_number = len(protein_atoms) + 1
        chain_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        
        for i, pose in enumerate(fragment_poses):
            chain = chain_letters[i % 26]
            
            f.write(f"REMARK Chain {chain}: {pose['name']} (Energy: {pose['energy']:.2f} kcal/mol)\n")
            
            for atom_line in pose['atoms']:
                # Modifica número do átomo e chain
                parts = atom_line.split()
                if len(parts) >= 9:
                    # Reconstrói linha HETATM com novos números
                    new_line = f"HETATM{atom_number:5d}  {parts[2]:3s} {parts[3]:3s} {chain}{i+1:4d}    {parts[5]:8s}{parts[6]:8s}{parts[7]:8s}  1.00  0.00          {parts[2][0]:2s}\n"
                    f.write(new_line)
                    atom_number += 1
            
            f.write("TER\n")
        
        f.write("END\n")
    
    print(f"✅ PDB completo criado: {output_file}")
    print(f"📊 Total: {len(protein_atoms)} átomos da proteína + {len(fragment_poses)} fragmentos hotspot")
    
    # Verifica o arquivo criado
    if os.path.exists(output_file):
        with open(output_file, 'r') as f:
            lines = f.readlines()
        
        atom_count = sum(1 for line in lines if line.startswith('ATOM') or line.startswith('HETATM'))
        print(f"🔍 Verificação: {len(lines)} linhas totais, {atom_count} linhas de átomos")
        print(f"📁 Arquivo salvo em: {output_file}")
    
    return output_file

if __name__ == "__main__":
    create_complete_pdb()
