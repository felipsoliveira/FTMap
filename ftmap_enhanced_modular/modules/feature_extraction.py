"""
M√≥dulo de Extra√ß√£o de Features ENHANCED
======================================
Extrai 29 features avan√ßadas dos clusters para machine learning (matching original algorithm).
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from scipy.spatial.distance import pdist, squareform, cdist
from scipy.spatial import ConvexHull
from scipy.stats import skew, kurtosis
import warnings
warnings.filterwarnings('ignore')

from config import FTMapConfig

@dataclass
class ProbeProperties:
    """ENHANCED: Propriedades qu√≠micas completas dos probes (matching original algorithm)"""
    molecular_weight: float
    logp: float  # Coeficiente de parti√ß√£o
    hbd: int     # Hydrogen bond donors
    hba: int     # Hydrogen bond acceptors
    psa: float   # Polar surface area
    dipole: float # Momento dipolar
    aromatic: bool
    polar: bool
    charged: bool

@dataclass
class ClusterFeatures:
    """ENHANCED: Features extra√≠das de um cluster (29 features total - matching original algorithm)"""
    cluster_id: int
    
    # Features energ√©ticas (5)
    mean_affinity: float
    std_affinity: float
    min_affinity: float
    max_affinity: float
    energy_range: float
    
    # Features espaciais (9)
    center_x: float
    center_y: float
    center_z: float
    spatial_spread: float
    volume: float
    compactness: float
    surface_area: float
    aspect_ratio: float
    radial_distribution: float
    
    # Features qu√≠micas (8) 
    probe_diversity: int
    hydrophobic_count: int
    polar_count: int
    aromatic_count: int
    charged_count: int
    molecular_weight_avg: float
    logp_avg: float
    polar_surface_area: float
    
    # Features de intera√ß√£o (6)
    hydrogen_bond_donors: int
    hydrogen_bond_acceptors: int
    vdw_interactions: float
    electrostatic_potential: float
    pi_stacking_potential: float
    hydrophobic_surface: float
    
    # Features de consenso (1) - adjusted to match 29 total
    consensus_density: float
    hydrogen_bond_donors: int
    hydrogen_bond_acceptors: int
    vdw_interactions: float
    electrostatic_potential: float
    pi_stacking_potential: float
    hydrophobic_surface: float
    
    # Features de consenso (4)
    consensus_density: float
    probe_agreement: float
    energy_consensus: float
    spatial_consensus: float
    
    # Features b√°sicas mantidas (2) 
    rmsd_mean: float
    pose_count: int

class FeatureExtractor:
    """ENHANCED: Classe principal para extra√ß√£o de 29 features avan√ßadas (matching original algorithm)"""
    
    def __init__(self, config: Optional[FTMapConfig] = None):
        self.config = config or FTMapConfig()
        self.probe_properties = self._initialize_enhanced_probe_properties()
        
    def _initialize_enhanced_probe_properties(self) -> Dict[str, ProbeProperties]:
        """ENHANCED: Inicializa propriedades qu√≠micas completas dos 18 probes (matching original algorithm)"""
        return {
            'ethanol': ProbeProperties(46.07, -0.31, 1, 1, 20.23, 1.69, False, True, False),
            'isopropanol': ProbeProperties(60.10, 0.05, 1, 1, 20.23, 1.66, False, True, False),
            'acetone': ProbeProperties(58.08, -0.24, 0, 1, 17.07, 2.88, False, True, False),
            'benzene': ProbeProperties(78.11, 2.13, 0, 0, 0.0, 0.0, True, False, False),
            'phenol': ProbeProperties(94.11, 1.46, 1, 1, 20.23, 1.45, True, True, False),
            'imidazole': ProbeProperties(68.08, -0.76, 1, 2, 28.68, 3.61, True, True, True),
            'indole': ProbeProperties(117.15, 2.14, 1, 1, 15.79, 2.11, True, True, False),
            'urea': ProbeProperties(60.06, -2.11, 2, 1, 69.11, 4.56, False, True, False),
            'acetamide': ProbeProperties(59.07, -1.26, 1, 1, 43.09, 3.76, False, True, False),
            'water': ProbeProperties(18.02, -1.38, 2, 1, 0.0, 1.85, False, True, False),
            'methylamine': ProbeProperties(31.06, -0.57, 2, 1, 26.02, 1.31, False, True, True),
            'cyclohexane': ProbeProperties(84.16, 3.44, 0, 0, 0.0, 0.0, False, False, False),
            'ethane': ProbeProperties(30.07, 1.81, 0, 0, 0.0, 0.0, False, False, False),
            'acetaldehyde': ProbeProperties(44.05, 0.45, 0, 1, 17.07, 2.75, False, True, False),
            'dmf': ProbeProperties(73.09, -1.01, 0, 1, 20.31, 3.82, False, True, False),
            'dimethylether': ProbeProperties(46.07, 0.10, 0, 1, 9.23, 1.30, False, True, False),
            'acetonitrile': ProbeProperties(41.05, -0.34, 0, 1, 23.79, 3.92, False, True, False),
            'benzaldehyde': ProbeProperties(106.12, 1.48, 0, 1, 17.07, 3.0, True, True, False)
        }
        
    def extract_cluster_features(self, clusters: List, all_poses: List) -> pd.DataFrame:
        """
        ENHANCED: Extrai 29 features completas de todos os clusters
        
        Args:
            clusters: Lista de objetos Cluster
            all_poses: Lista completa de poses de docking
            
        Returns:
            DataFrame com 29 features de cada cluster
        """
        print(f"üî¨ Extraindo 29 features ENHANCED de {len(clusters)} clusters")
        
        features_list = []
        
        for cluster in clusters:
            cluster_poses = [all_poses[i] for i in cluster.poses_indices]
            features = self._extract_single_cluster_features(cluster, cluster_poses, all_poses)
            features_list.append(features)
        
        # Converter para DataFrame
        features_df = pd.DataFrame([
            self._features_to_dict(f) for f in features_list
        ])
        
        print(f"‚úÖ Features ENHANCED extra√≠das: {features_df.shape[1]} features por cluster")
        print(f"üéØ Target alcan√ßado: 29 features avan√ßadas vs. 6 b√°sicas")
        return features_df
    
    def _extract_single_cluster_features(self, cluster, cluster_poses: List, 
                                       all_poses: List) -> ClusterFeatures:
        """ENHANCED: Extrai TODAS as 29 features avan√ßadas de um √∫nico cluster"""
        
        # Features energ√©ticas (5)
        affinities = [pose.affinity for pose in cluster_poses]
        energy_features = self._extract_energy_features(affinities)
        
        # Features espaciais (9)
        spatial_features = self._extract_enhanced_spatial_features(cluster_poses)
        
        # Features qu√≠micas (8)
        chemical_features = self._extract_enhanced_chemical_features(cluster_poses)
        
        # Features de intera√ß√£o (6)
        interaction_features = self._extract_enhanced_interaction_features(cluster_poses)
        
        # Features de consenso (1)
        consensus_features = self._extract_enhanced_consensus_features(cluster, cluster_poses, all_poses)
        
        return ClusterFeatures(
            cluster_id=cluster.cluster_id,
            **energy_features,
            **spatial_features,
            **chemical_features,
            **interaction_features,
            **consensus_features
        )
    
    def _extract_energy_features(self, affinities: List[float]) -> Dict[str, float]:
        """Extrai features energ√©ticas"""
        affinities = np.array(affinities)
        
        return {
            'mean_affinity': float(np.mean(affinities)),
            'std_affinity': float(np.std(affinities)),
            'min_affinity': float(np.min(affinities)),
            'max_affinity': float(np.max(affinities)),
            'energy_range': float(np.ptp(affinities))
        }
    
    def _extract_enhanced_spatial_features(self, poses: List) -> Dict[str, float]:
        """ENHANCED: Extrai 9 features espaciais avan√ßadas"""
        coordinates = np.array([pose.coordinates for pose in poses])
        
        # Centro de massa
        center = np.mean(coordinates, axis=0)
        
        # Spread espacial
        distances_from_center = np.linalg.norm(coordinates - center, axis=1)
        spatial_spread = float(np.std(distances_from_center))
        
        # Volume aproximado usando convex hull
        volume = self._calculate_enhanced_volume(coordinates)
        
        # Compacta√ß√£o (volume/spread)
        compactness = volume / (spatial_spread + 1e-6) if spatial_spread > 0 else 0.0
        
        # √Årea de superf√≠cie usando convex hull
        surface_area = self._calculate_enhanced_surface_area(coordinates)
        
        # Aspect ratio (raz√£o entre maior e menor dimens√£o)
        aspect_ratio = self._calculate_enhanced_aspect_ratio(coordinates)
        
        # Distribui√ß√£o radial
        radial_distribution = self._calculate_enhanced_radial_distribution(coordinates, center)
        
        return {
            'center_x': float(center[0]),
            'center_y': float(center[1]),
            'center_z': float(center[2]),
            'spatial_spread': spatial_spread,
            'volume': float(volume),
            'compactness': float(compactness),
            'surface_area': float(surface_area),
            'aspect_ratio': float(aspect_ratio),
            'radial_distribution': float(radial_distribution)
        }
    
    def _extract_enhanced_chemical_features(self, poses: List) -> Dict[str, float]:
        """ENHANCED: Extrai 8 features qu√≠micas avan√ßadas baseadas nas propriedades completas dos probes"""
        probe_names = [pose.probe_name for pose in poses]
        
        # Contadores por tipo qu√≠mico
        hydrophobic_count = 0
        polar_count = 0
        aromatic_count = 0
        charged_count = 0
        
        # Listas para propriedades num√©ricas
        molecular_weights = []
        logp_values = []
        polar_surface_areas = []
        
        for probe_name in probe_names:
            probe_props = self.probe_properties.get(probe_name)
            
            if probe_props:
                # Contagem por tipo qu√≠mico
                if not probe_props.polar and not probe_props.aromatic:
                    hydrophobic_count += 1
                if probe_props.polar:
                    polar_count += 1
                if probe_props.aromatic:
                    aromatic_count += 1
                if probe_props.charged:
                    charged_count += 1
                
                # Propriedades f√≠sico-qu√≠micas
                molecular_weights.append(probe_props.molecular_weight)
                logp_values.append(probe_props.logp)
                polar_surface_areas.append(probe_props.psa)
            else:
                # Valores padr√£o para probes n√£o encontradas
                molecular_weights.append(50.0)
                logp_values.append(0.0)
                polar_surface_areas.append(20.0)
        
        return {
            'probe_diversity': len(set(probe_names)),
            'hydrophobic_count': hydrophobic_count,
            'polar_count': polar_count,
            'aromatic_count': aromatic_count,
            'charged_count': charged_count,
            'molecular_weight_avg': float(np.mean(molecular_weights)),
            'logp_avg': float(np.mean(logp_values)),
            'polar_surface_area': float(np.mean(polar_surface_areas))
        }
    
    def _extract_enhanced_interaction_features(self, poses: List) -> Dict[str, float]:
        """ENHANCED: Extrai 6 features de intera√ß√£o molecular baseadas nas propriedades completas dos probes"""
        
        h_bond_donors = 0
        h_bond_acceptors = 0
        vdw_interactions = 0.0
        electrostatic_potential = 0.0
        pi_stacking_potential = 0.0
        hydrophobic_surface = 0.0
        
        for pose in poses:
            probe_props = self.probe_properties.get(pose.probe_name)
            
            if probe_props:
                # Capacidade de liga√ß√£o de hidrog√™nio
                h_bond_donors += probe_props.hbd
                h_bond_acceptors += probe_props.hba
                
                # Van der Waals interactions (baseado no peso molecular)
                vdw_interactions += probe_props.molecular_weight * 0.01
                
                # Potencial eletrost√°tico (baseado no momento dipolar)
                electrostatic_potential += probe_props.dipole
                
                # Pi-stacking potential (probes arom√°ticas)
                if probe_props.aromatic:
                    pi_stacking_potential += 1.0
                
                # Superf√≠cie hidrof√≥bica (probes hidrof√≥bicas)
                if not probe_props.polar and not probe_props.aromatic:
                    hydrophobic_surface += probe_props.molecular_weight * 0.1
        
        # Normalizar pelos valores por pose
        num_poses = len(poses)
        if num_poses > 0:
            vdw_interactions /= num_poses
            hydrophobic_surface /= num_poses
        
        return {
            'hydrogen_bond_donors': h_bond_donors,
            'hydrogen_bond_acceptors': h_bond_acceptors,
            'vdw_interactions': float(vdw_interactions),
            'electrostatic_potential': float(electrostatic_potential),
            'pi_stacking_potential': float(pi_stacking_potential),
            'hydrophobic_surface': float(hydrophobic_surface)
        }
    
    def _extract_enhanced_consensus_features(self, cluster, cluster_poses: List, all_poses: List) -> Dict[str, float]:
        """ENHANCED: Extrai 1 feature de consenso (ajustado para total de 29 features)"""
        
        # Densidade de consenso local baseada na propor√ß√£o de poses no cluster
        consensus_density = len(cluster_poses) / len(all_poses) if all_poses else 0.0
        
        return {
            'consensus_density': float(consensus_density)
        }
    
    def _calculate_enhanced_volume(self, coordinates: np.ndarray) -> float:
        """ENHANCED: Calcula volume usando convex hull quando poss√≠vel"""
        if len(coordinates) < 4:
            return self._approximate_volume(coordinates)
        
        try:
            hull = ConvexHull(coordinates)
            return hull.volume
        except:
            return self._approximate_volume(coordinates)
    
    def _calculate_enhanced_surface_area(self, coordinates: np.ndarray) -> float:
        """ENHANCED: Calcula √°rea de superf√≠cie usando convex hull quando poss√≠vel"""
        if len(coordinates) < 4:
            return self._approximate_surface_area(coordinates)
        
        try:
            hull = ConvexHull(coordinates)
            return hull.area
        except:
            return self._approximate_surface_area(coordinates)
    
    def _calculate_enhanced_aspect_ratio(self, coordinates: np.ndarray) -> float:
        """ENHANCED: Calcula aspect ratio usando PCA"""
        if len(coordinates) < 2:
            return 1.0
        
        try:
            # Principal Component Analysis para encontrar dire√ß√µes principais
            centered_coords = coordinates - np.mean(coordinates, axis=0)
            cov_matrix = np.cov(centered_coords.T)
            eigenvalues = np.linalg.eigvals(cov_matrix)
            eigenvalues = np.sort(eigenvalues)[::-1]  # Ordem decrescente
            
            # Aspect ratio = maior eigenvalue / menor eigenvalue
            if eigenvalues[-1] > 1e-6:
                return float(eigenvalues[0] / eigenvalues[-1])
            else:
                return 1.0
        except:
            return self._calculate_aspect_ratio(coordinates)
    
    def _calculate_enhanced_radial_distribution(self, coordinates: np.ndarray, center: np.ndarray) -> float:
        """ENHANCED: Calcula distribui√ß√£o radial com m√©tricas mais sofisticadas"""
        distances = np.linalg.norm(coordinates - center, axis=1)
        
        if len(distances) <= 1:
            return 0.0
        
        # Coeficiente de varia√ß√£o da distribui√ß√£o radial
        mean_dist = np.mean(distances)
        std_dist = np.std(distances)
        cv = std_dist / mean_dist if mean_dist > 0 else 0.0
        
        return float(cv)
    
    def _approximate_volume(self, coordinates: np.ndarray) -> float:
        """Aproxima volume usando bounding box (fallback method)"""
        if len(coordinates) < 2:
            return 0.0
        
        min_coords = np.min(coordinates, axis=0)
        max_coords = np.max(coordinates, axis=0)
        dimensions = max_coords - min_coords
        
        volume = np.prod(dimensions)
        return float(volume)
    
    def _approximate_surface_area(self, coordinates: np.ndarray) -> float:
        """Aproxima √°rea de superf√≠cie usando bounding box (fallback method)"""
        if len(coordinates) < 2:
            return 0.0
        
        min_coords = np.min(coordinates, axis=0)
        max_coords = np.max(coordinates, axis=0)
        dimensions = max_coords - min_coords
        
        # √Årea de superf√≠cie de um paralelep√≠pedo
        l, w, h = dimensions
        surface_area = 2 * (l*w + l*h + w*h)
        return float(surface_area)
    
    def _calculate_aspect_ratio(self, coordinates: np.ndarray) -> float:
        """Calcula aspect ratio b√°sico (fallback method)"""
        if len(coordinates) < 2:
            return 1.0
        
        min_coords = np.min(coordinates, axis=0)
        max_coords = np.max(coordinates, axis=0)
        dimensions = max_coords - min_coords
        
        max_dim = np.max(dimensions)
        min_dim = np.min(dimensions[dimensions > 0]) if np.any(dimensions > 0) else 1.0
        
        return float(max_dim / min_dim) if min_dim > 0 else 1.0
    
    def _features_to_dict(self, features: ClusterFeatures) -> Dict[str, Any]:
        """ENHANCED: Converte objeto ClusterFeatures para dicion√°rio (29 features)"""
        return {
            'cluster_id': features.cluster_id,
            # Features energ√©ticas (5)
            'mean_affinity': features.mean_affinity,
            'std_affinity': features.std_affinity,
            'min_affinity': features.min_affinity,
            'max_affinity': features.max_affinity,
            'energy_range': features.energy_range,
            # Features espaciais (9)
            'center_x': features.center_x,
            'center_y': features.center_y,
            'center_z': features.center_z,
            'spatial_spread': features.spatial_spread,
            'volume': features.volume,
            'compactness': features.compactness,
            'surface_area': features.surface_area,
            'aspect_ratio': features.aspect_ratio,
            'radial_distribution': features.radial_distribution,
            # Features qu√≠micas (8)
            'probe_diversity': features.probe_diversity,
            'hydrophobic_count': features.hydrophobic_count,
            'polar_count': features.polar_count,
            'aromatic_count': features.aromatic_count,
            'charged_count': features.charged_count,
            'molecular_weight_avg': features.molecular_weight_avg,
            'logp_avg': features.logp_avg,
            'polar_surface_area': features.polar_surface_area,
            # Features de intera√ß√£o (6)
            'hydrogen_bond_donors': features.hydrogen_bond_donors,
            'hydrogen_bond_acceptors': features.hydrogen_bond_acceptors,
            'vdw_interactions': features.vdw_interactions,
            'electrostatic_potential': features.electrostatic_potential,
            'pi_stacking_potential': features.pi_stacking_potential,
            'hydrophobic_surface': features.hydrophobic_surface,
            # Features de consenso (1)
            'consensus_density': features.consensus_density
        }
