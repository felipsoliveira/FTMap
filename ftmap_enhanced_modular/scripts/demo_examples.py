#!/usr/bin/env python3
"""
FTMap Enhanced - Script de Demonstra√ß√£o
Exemplos pr√°ticos de uso do sistema FTMap Enhanced
"""

import os
import sys
import time
from pathlib import Path

# Adicionar path dos m√≥dulos
sys.path.append(str(Path(__file__).parent / "modules"))

from modules.workflow_manager import FTMapWorkflowManager
from configs.config import FTMapConfig


def demo_basic_analysis():
    """Demonstra√ß√£o: An√°lise b√°sica completa"""
    print("üß™ DEMO 1: An√°lise B√°sica Completa")
    print("="*50)
    
    # Prote√≠na de exemplo (voc√™ pode baixar de PDB)
    protein_file = "example_protein.pdb"  # Substitua por arquivo real
    
    if not Path(protein_file).exists():
        print(f"‚ùå Arquivo {protein_file} n√£o encontrado")
        print("üí° Baixe uma prote√≠na exemplo do PDB:")
        print("   wget https://files.rcsb.org/download/1ABC.pdb -O example_protein.pdb")
        return
    
    # Configura√ß√£o padr√£o
    config = FTMapConfig()
    
    # Inicializar workflow
    workflow = FTMapWorkflowManager(
        config=config,
        output_dir="./demo1_basic_analysis"
    )
    
    # Executar an√°lise completa
    print("üöÄ Executando an√°lise completa...")
    start_time = time.time()
    
    try:
        results = workflow.run_complete_workflow(protein_file)
        
        duration = time.time() - start_time
        print(f"‚úÖ An√°lise conclu√≠da em {duration:.1f}s")
        print(f"üìä {results['summary']['clusters_found']} clusters encontrados")
        print(f"üíä {results['summary']['predicted_druggable_sites']} s√≠tios druggable")
        print(f"üìÅ Resultados em: ./demo1_basic_analysis")
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")


def demo_custom_configuration():
    """Demonstra√ß√£o: Configura√ß√£o personalizada"""
    print("\nüß™ DEMO 2: Configura√ß√£o Personalizada")
    print("="*50)
    
    protein_file = "example_protein.pdb"
    
    if not Path(protein_file).exists():
        print(f"‚ùå Arquivo {protein_file} n√£o encontrado")
        return
    
    # Configura√ß√£o personalizada
    config = FTMapConfig()
    
    # Modificar par√¢metros para an√°lise r√°pida
    config.TARGET_POSES_PER_PROBE = 5  # Reduzir poses
    config.ENERGY_CUTOFF = -3.0        # Menos restritivo
    config.MAX_CLUSTERS = 8            # Menos clusters
    config.PARALLEL_PROCESSES = 8      # Mais paraleliza√ß√£o
    
    # Usar apenas probes espec√≠ficos
    quick_probes = ["water", "methanol", "benzene", "acetate"]
    config.PROBE_MOLECULES = {k: v for k, v in config.PROBE_MOLECULES.items() 
                            if k in quick_probes}
    
    print(f"üéØ Usando {len(config.PROBE_MOLECULES)} probes")
    print(f"‚ö° {config.PARALLEL_PROCESSES} processos paralelos")
    
    # Inicializar workflow
    workflow = FTMapWorkflowManager(
        config=config,
        output_dir="./demo2_custom_config"
    )
    
    # Executar an√°lise
    print("üöÄ Executando an√°lise personalizada...")
    start_time = time.time()
    
    try:
        results = workflow.run_complete_workflow(protein_file)
        
        duration = time.time() - start_time
        print(f"‚úÖ An√°lise r√°pida conclu√≠da em {duration:.1f}s")
        print(f"üìä Resultados em: ./demo2_custom_config")
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")


def demo_step_by_step():
    """Demonstra√ß√£o: Execu√ß√£o step-by-step"""
    print("\nüß™ DEMO 3: Execu√ß√£o Step-by-Step")
    print("="*50)
    
    protein_file = "example_protein.pdb"
    
    if not Path(protein_file).exists():
        print(f"‚ùå Arquivo {protein_file} n√£o encontrado")
        return
    
    config = FTMapConfig()
    workflow = FTMapWorkflowManager(
        config=config,
        output_dir="./demo3_step_by_step"
    )
    
    print("üß¨ Step 1: Prepara√ß√£o da prote√≠na...")
    try:
        # Step 1: Prepara√ß√£o
        prep_result = workflow._step_protein_preparation(protein_file, {})
        print(f"   ‚úÖ {len(prep_result['binding_sites'])} s√≠tios de liga√ß√£o detectados")
        
        # Step 2: Docking (apenas alguns probes para demo)
        print("üéØ Step 2: Docking molecular...")
        mock_previous = {'protein_preparation': prep_result}
        dock_result = workflow._step_docking_execution(protein_file, mock_previous)
        print(f"   ‚úÖ {dock_result['filtered_poses']} poses filtradas")
        
        # Step 3: Clustering
        print("üéØ Step 3: An√°lise de clustering...")
        mock_previous['docking_execution'] = dock_result
        cluster_result = workflow._step_clustering_analysis(protein_file, mock_previous)
        print(f"   ‚úÖ {len(cluster_result['final_clusters'])} clusters formados")
        
        print("üéâ Demo step-by-step conclu√≠da!")
        
    except Exception as e:
        print(f"‚ùå Erro no step-by-step: {str(e)}")


def demo_visualization_only():
    """Demonstra√ß√£o: Apenas visualiza√ß√µes de resultados existentes"""
    print("\nüß™ DEMO 4: Visualiza√ß√µes de Resultados Existentes")
    print("="*50)
    
    # Verificar se existem resultados anteriores
    results_dirs = [d for d in Path(".").iterdir() 
                   if d.is_dir() and d.name.startswith("demo")]
    
    if not results_dirs:
        print("‚ùå Nenhum resultado anterior encontrado")
        print("üí° Execute primeiro uma das outras demos")
        return
    
    # Usar o primeiro diret√≥rio encontrado
    results_dir = results_dirs[0]
    print(f"üìÅ Usando resultados de: {results_dir}")
    
    # Procurar por arquivos de estado
    state_files = list(results_dir.glob("workflow_state.json"))
    
    if not state_files:
        print("‚ùå Arquivo de estado n√£o encontrado")
        return
    
    state_file = state_files[0]
    
    try:
        import json
        with open(state_file, 'r') as f:
            saved_results = json.load(f)
        
        print("üìä Gerando visualiza√ß√µes adicionais...")
        
        # Aqui voc√™ poderia implementar visualiza√ß√µes espec√≠ficas
        # Por exemplo, plots personalizados, an√°lises comparativas, etc.
        
        print("‚úÖ Visualiza√ß√µes geradas!")
        print(f"üìÅ Verifique: {results_dir}/visualizations/")
        
    except Exception as e:
        print(f"‚ùå Erro na visualiza√ß√£o: {str(e)}")


def demo_comparison_analysis():
    """Demonstra√ß√£o: An√°lise comparativa de m√∫ltiplas prote√≠nas"""
    print("\nüß™ DEMO 5: An√°lise Comparativa")
    print("="*50)
    
    # Lista de prote√≠nas para comparar
    proteins = ["protein1.pdb", "protein2.pdb"]  # Substitua por arquivos reais
    
    available_proteins = [p for p in proteins if Path(p).exists()]
    
    if len(available_proteins) < 2:
        print("‚ùå Necess√°rio pelo menos 2 prote√≠nas para compara√ß√£o")
        print("üí° Disponibilize arquivos: protein1.pdb, protein2.pdb")
        return
    
    print(f"üî¨ Comparando {len(available_proteins)} prote√≠nas...")
    
    results = {}
    config = FTMapConfig()
    
    for i, protein in enumerate(available_proteins):
        print(f"\nüìä Analisando prote√≠na {i+1}: {protein}")
        
        workflow = FTMapWorkflowManager(
            config=config,
            output_dir=f"./demo5_comparison/protein_{i+1}"
        )
        
        try:
            result = workflow.run_complete_workflow(protein)
            results[protein] = result['summary']
            print(f"   ‚úÖ {result['summary']['clusters_found']} clusters")
            
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)}")
    
    # Comparar resultados
    if len(results) >= 2:
        print("\nüìà COMPARA√á√ÉO DE RESULTADOS:")
        print("-" * 40)
        
        for protein, summary in results.items():
            print(f"{protein}:")
            print(f"  Clusters: {summary.get('clusters_found', 0)}")
            print(f"  S√≠tios druggable: {summary.get('predicted_druggable_sites', 0)}")
            print(f"  Top score: {summary.get('top_hotspot_score', 0):.3f}")


def demo_performance_benchmark():
    """Demonstra√ß√£o: Benchmark de performance"""
    print("\nüß™ DEMO 6: Benchmark de Performance")
    print("="*50)
    
    protein_file = "example_protein.pdb"
    
    if not Path(protein_file).exists():
        print(f"‚ùå Arquivo {protein_file} n√£o encontrado")
        return
    
    # Testar diferentes configura√ß√µes de paraleliza√ß√£o
    parallel_configs = [1, 2, 4, 8]
    results = {}
    
    for processes in parallel_configs:
        print(f"\n‚ö° Testando com {processes} processo(s)...")
        
        config = FTMapConfig()
        config.PARALLEL_PROCESSES = processes
        config.TARGET_POSES_PER_PROBE = 3  # Reduzir para benchmark
        
        # Usar apenas probes essenciais
        config.PROBE_MOLECULES = {k: v for k, v in config.PROBE_MOLECULES.items() 
                                if k in ["water", "methanol", "benzene"]}
        
        workflow = FTMapWorkflowManager(
            config=config,
            output_dir=f"./demo6_benchmark/test_{processes}proc"
        )
        
        start_time = time.time()
        
        try:
            workflow_result = workflow.run_complete_workflow(protein_file)
            duration = time.time() - start_time
            
            results[processes] = {
                'duration': duration,
                'clusters': workflow_result['summary']['clusters_found']
            }
            
            print(f"   ‚úÖ Conclu√≠do em {duration:.1f}s")
            
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)}")
            results[processes] = {'duration': None, 'error': str(e)}
    
    # Mostrar resultados do benchmark
    print("\nüìä RESULTADOS DO BENCHMARK:")
    print("-" * 40)
    
    for processes, result in results.items():
        if result['duration']:
            speedup = results[1]['duration'] / result['duration'] if 1 in results and results[1]['duration'] else 1
            print(f"{processes} processo(s): {result['duration']:.1f}s (speedup: {speedup:.1f}x)")
        else:
            print(f"{processes} processo(s): ERRO")


def main():
    """Menu principal das demonstra√ß√µes"""
    print("üß™ FTMap Enhanced - Demonstra√ß√µes")
    print("="*50)
    
    demos = [
        ("An√°lise B√°sica Completa", demo_basic_analysis),
        ("Configura√ß√£o Personalizada", demo_custom_configuration), 
        ("Execu√ß√£o Step-by-Step", demo_step_by_step),
        ("Visualiza√ß√µes Existentes", demo_visualization_only),
        ("An√°lise Comparativa", demo_comparison_analysis),
        ("Benchmark de Performance", demo_performance_benchmark)
    ]
    
    print("\nDemonstra√ß√µes dispon√≠veis:")
    for i, (name, _) in enumerate(demos, 1):
        print(f"  {i}. {name}")
    
    print("\nDigite o n√∫mero da demo (ou 'all' para todas):")
    choice = input("> ").strip()
    
    if choice.lower() == 'all':
        print("\nüöÄ Executando todas as demonstra√ß√µes...")
        for name, demo_func in demos:
            print(f"\n{'='*60}")
            print(f"Executando: {name}")
            print(f"{'='*60}")
            try:
                demo_func()
            except Exception as e:
                print(f"‚ùå Erro na demo {name}: {str(e)}")
    
    elif choice.isdigit() and 1 <= int(choice) <= len(demos):
        demo_index = int(choice) - 1
        name, demo_func = demos[demo_index]
        
        print(f"\nüöÄ Executando: {name}")
        try:
            demo_func()
        except Exception as e:
            print(f"‚ùå Erro na demo: {str(e)}")
    
    else:
        print("‚ùå Op√ß√£o inv√°lida")


if __name__ == "__main__":
    main()
